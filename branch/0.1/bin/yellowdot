#!/bin/env perl

use strict;
use warnings;

use GD::Simple;
use Getopt::Long;
use Pod::Usage;

sub required
{
	my ($options, @flags) = @_;
	
	foreach my $flag (@flags)
	{
		pod2usage("'$flag' is a required option") if (!exists $options->{$flag});
	}
}

sub parse_cmdline
{
	my $options = {};	
	GetOptions ($options, "paper=s", "filename=s", "help");
		
	pod2usage(1) if $options->{help};
	required($options, "paper", "filename");
	
	return $options;
}

sub paper_size
{
	my ($paper) = @_;

	my ($max_x, $max_y);

	if (uc($paper) eq "LETTER")
	{
		($max_x, $max_y) = (2550, 3300);
	}
	elsif (uc($paper) eq "A4")
	{
		($max_x, $max_y) = (2480, 3508);
	}
	
	return ($max_x, $max_y);
}

sub generate_image
{
	my ($max_x, $max_y, $density) = @_;
	
	my $image = GD::Simple->new($max_x, $max_y);
	$image->fgcolor('yellow');

	my $dots = $max_x * $max_y * $density;

	for (my $count = 0; $count < $dots; $count++)
	{
		my ($rand_x, $rand_y) = (int(rand()*$max_x), int(rand()*$max_y));
		$image->moveTo($rand_x, $rand_y);
		$image->ellipse(1,1);
	}
	
	return $image;
}

sub main
{
	my $options = parse_cmdline();

	my $density = 0.001;

	my ($max_x, $max_y) = paper_size($options->{paper});
	my $image = generate_image($max_x, $max_y, $density);
	
	open (OUT, ">$options->{filename}");
	print OUT $image->png;
	close (OUT);
}

&main;

__END__

=head1 NAME

yellowdot - create an image file containing yellow dots

=head1 SYNOPSIS

yellowdot --paper letter --filename overlay.png

Options:

	--paper			size of paper (letter or A4)

	--filename		name of output file

=head1 OPTIONS

=over 4

=item --paper

	Two paper sizes are currently supported: letter and A4.  Only
	300 DPI is supported, so the paper size option results in the 
	creation of a bitmap that will fill a complete side of the
	indicated paper type, when printed at 300 DPI.

=item --filename
	
	The output will be stored in a file with this name.  It 
	should end in .png or .PNG, since that is the only format 
	supported now.  However, using another extension won't 
	ruin anything.

=item --density		

	not implemented yet

=item --margin		

	not implemented yet

=back

=head1 DOWNLOAD

L<http://iandennismiller.com/software/yellowdot/yellowdot>

=head1 INSTALLATION

chmod 755 yellowdot

cp yellowdot /usr/local/bin

cpan -i GD

=head1 AUTHOR

Ian Dennis Miller <iandennismiller@gmail.com>

L<http://iandennismiller.com/software/yellowdot>

=head1 COPYRIGHT

Copyright (c) 2008 Ian Dennis Miller

=head1 LICENSE

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the "Software"), to deal in the Software without
restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following
conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.
Except as contained in this notice, the name(s) of the above 
copyright holders shall not be used in advertising or otherwise 
to promote the sale, use or other dealings in this Software 
without prior written authorization.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

=cut

1;